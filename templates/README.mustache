# OPC UA {{projectName}} Server (Generated)

This project is an autogenerated Open62541-based OPC UA server.  
It includes custom object, variable, and method nodes based on {{projectName}}.

---

## Build Instructions

To build the server:

```bash
mkdir build && cd build
cmake .. -Dopen62541_SOURCE_DIR=/path/to/open62541/
make
```

Make sure to replace `/path/to/open62541/` with the actual path to your local Open62541 source folder.

---

## Namespaces

The following custom namespaces are added to the server:

| Index | URI |
|-------|-----|
{{#nameSpaces}}| `{{index}}` | `{{{uri}}}` |
{{/nameSpaces}}

---

## Node Summary

### Object Nodes

| Name | NodeId | Parent NodeId | BrowseName | Description |
|------|--------|----------------|------------|-------------|
{{#objectNodes}}| `{{name}}` | `ns={{namespaceIndex}};i={{identifier}}` | `{{{parentNodeId}}}` | `{{{baseBrowseName}}}` | `{{description}}` |
{{/objectNodes}}

### Variable Nodes

| Name | NodeId | Parent NodeId | BrowseName | DataType | Description |
|------|--------|----------------|------------|----------|-------------|
{{#variableNodes}}| `{{name}}` | `ns={{namespaceIndex}};i={{identifier}}` | `{{{parentNodeId}}}` | `{{{baseBrowseName}}}` | `{{dataType}}` | `{{description}}` |
{{/variableNodes}}

### Method Nodes

| Name | NodeId | Parent NodeId | BrowseName | Input(s) | Output(s) |
|------|--------|----------------|------------|----------|-----------|
{{#methodNodes}}| `{{name}}` | `ns={{namespaceIndex}};i={{identifier}}` | `{{{parentNodeId}}}` | `{{{browseName}}}` | {{#inputArguments}}`{{argumentName}}: {{argumentDataType}}`{{^last}}, {{/last}}{{/inputArguments}}{{^inputArguments}}-{{/inputArguments}} | {{#outputArguments}}`{{argumentName}}: {{argumentDataType}}`{{^last}}, {{/last}}{{/outputArguments}}{{^outputArguments}}-{{/outputArguments}} |
{{/methodNodes}}

---

## Server Behavior

- All nodes are assigned statically defined `NodeIds`.
- Variable nodes support read/write operations using a custom `DataSource`.
- Method nodes are linked via a unified callback dispatcher (`resolveMethodCallback`).
- Objects are added dynamically and can support optional children via `createOptionalChildCallback`.

---

## Signal Handling

The server listens for `SIGINT` (Ctrl+C) and shuts down gracefully when triggered.

---

## Example Output

Upon startup, the server will print logs like:

```
Starting Server!
<DisplayName> added to server with statuscode: Good
<VariableName> added to variable data source with statuscode: Good
<MethodName>Callback called!
```

---

## License

This project is licensed under the [LGPL-3.0-or-later](https://spdx.org/licenses/LGPL-3.0-or-later.html).
